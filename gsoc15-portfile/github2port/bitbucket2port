#!/usr/bin/env port-tclsh
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
#
# Generate a bitbucket group template Portfile given bitbucket homepage or tarball URL

package require uri

proc usage {{channel stderr}} {
    global argv0
    puts $channel "Usage: $argv0 URL"
    puts $channel ""
    puts $channel "URL is the bitbucket homepage URL"
    puts $channel ""
    puts $channel "Example:"
    puts $channel "  $argv0 https://bitbucket.org/sshguard/sshguard"
}

proc val_or_def {val def} {
    expr {$val ne "" ? $val : $def}
}

proc parse_tarball_name {v} {
    set version ""
    set tag_prefix ""

    if {[regexp {[0-9]+([.-][0-9]+)+} $v version]} {
        if {[string length $version] < [string length $v]} {
            set tag_prefix [string range $v 0 [expr [string first $version $v] -1]]
        }
    }
    return [list $version $tag_prefix]
}

proc parse_bitbucket_url {url} {
    array set urlparts [uri::split $url]

    if {![string equal $urlparts(host) bitbucket.org]} {
        return -code error \
            "expected bitbucket url but got \"$url\""
    }

    set path [split $urlparts(path) /]
    set author [lindex $path 0]
    set project [lindex $path 1]
    set tarball [lindex $path end]

    set version "version"
    set tag_prefix ""

    return [concat $author $project [parse_tarball_name $tarball]]
}

if {$argc != 1} {
    usage
    exit 1
}

set url [lindex $argv 0]
set tmp [parse_bitbucket_url $url]

set author     [val_or_def [lindex $tmp 0] "author"]
set project    [val_or_def [lindex $tmp 1] "project"]
set version    [val_or_def [lindex $tmp 2] "version"]
set tag_prefix [val_or_def [lindex $tmp 3] "tag_prefix"]

puts "# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4"
puts "# \$Id\$"
puts ""
puts "PortSystem          1.0"

puts "PortGroup           bitbucket 1.0"
puts ""
puts "bitbucket.setup     ${author} ${project} ${version} ${tag_prefix}"

puts "categories          replaceme"
puts "platforms           darwin"

set maintainers "replaceme"

if {[info exist env(EMAIL)]} {
    set maintainers $env(EMAIL)
}

puts "maintainers         $maintainers"

puts "license             replaceme"

puts ""
puts "description         replaceme"
puts "long_description    replaceme"
puts ""

puts ""
puts "checksums           rmd160  12345 \\"
puts "                    sha256  6789a"
