#!/usr/bin/env tclsh
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
#
# Generate a github group template Portfile given tarball or project URL
#

proc usage {{channel stderr}} {
    global argv0
    puts $channel "Usage: $argv0 URL"
    puts $channel ""
    puts $channel "URL is the github tarball or project URL"
    puts $channel ""
    puts $channel "Example:"
    puts $channel "  $argv0 https://github.com/tmux/tmux"
    puts $channel "  $argv0 https://github.com/tmux/tmux/releases/download/2.0/tmux-2.0.tar.gz"
    puts $channel "  $argv0 https://github.com/jonas/tig/archive/tig-2.1.1.tar.gz"
}

proc val_or_def {val def} {
    expr {$val ne "" ? $val : $def}
}

if {$argc != 1} {
    usage
    exit 1
}

set url [lindex $argv 0]

set author author
set project project
set version 1.0
set tag_prefix "";              # tag_prefix, usually is empty or "v"

set tarball_from "";            # tarball type, including release and others

# 2.0, v0.3.8, release-v1.5.8, v0.8.5.tar.gz => version and tag_prefix if has
proc parse_fancy_version {v} {
    global version
    global tag_prefix
    if {[regexp {[0-9]+([.-][0-9]+)+} $v version]} {
        if {[string length $version] < [string length $v]} {
            set tag_prefix [string range $v 0 [expr [string first $version $v] -1]]
        }
    }
}

if {[string match */releases/download/* $url]} {
    set tarball_from releases

    set tmp [split $url /]
    set author [lindex $tmp 3]
    set project [lindex $tmp 4]
    # 2.0, v0.3.0
    set github_version [lindex $tmp 7]
    parse_fancy_version $github_version
} elseif {[string match */archive/* $url]} {
    set tarball_from ""

    set tmp [split $url /]
    set author [lindex $tmp 3]
    set project [lindex $tmp 4]
    # v0.8.5.tar.gz
    set tarball [lindex $tmp 6]
    parse_fancy_version $tarball
} elseif {[string match *github* $url]} {
    set tmp [split $url /]
    set author [lindex $tmp 3]
    set project [lindex $tmp 4]
} else {
    usage
    exit 1
}

set description replaceme
set homepage ""

proc parse_json {query json} {
    set tmp [exec jq $query $json]
    set tmp [string range $tmp 1 end-1]

    if {[expr {[string length $tmp] > 0}]} {
        return $tmp
    } else {
        return ""
    }
}

proc request_github {} {
    global author project
    global description homepage

    set json "/tmp/${author}-${project}.json"
    set api "https://api.github.com/repos/${author}/${project}"
    exec curl --silent --max-time 5 --output $json $api

    set description [val_or_def [parse_json .description $json] $description]
    set homepage [val_or_def [parse_json .description $json] $homepage]
}

# request_github

puts "# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4"
puts "# \$Id\$"
puts ""
puts "PortSystem          1.0"

puts "PortGroup           github 1.0"
puts ""
puts "github.setup        ${author} ${project} ${version} ${tag_prefix}"

# TODO: 6. (optional) Query categories, license etc from other Package Manager
puts "categories          replaceme"
puts "platforms           darwin"

set maintainers "replaceme"

if {[info exist env(EMAIL)] && ![string equal $env(EMAIL) ""]} {
    set maintainers $env(EMAIL)
}

puts "maintainers         $maintainers"

if {![string equal $homepage ""]} {
    puts "homepage            $homepage"
}

puts "license             replaceme"

puts ""
puts "description         $description"
puts "long_description    replaceme"
puts ""

if {![string equal $tarball_from ""]} {
    puts "github.tarball_from releases"
}

puts ""
puts "checksums           rmd160  12345 \\"
puts "                    sha256  6789a"
