#!/usr/bin/env tclsh
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

# Create Portfile
#
# Workflow:
# 1. Gather metadata
# 2. Feed template
# 3. Print result

# Get tarball filename from tarball URL
proc get_tarball_filename {url} {
    set length [string length $url]
    set last [string last "/" $url]
    incr last;                  # Discard prefix "/"
    return [string range $url $last $length]
}

# Get name from tarball filename
proc get_name {tarball} {
    set last_dash [string last "-" $tarball]
    incr last_dash -1;          # Discard suffix "-"
    return [string range $tarball 0 $last_dash]
}

# Get version from tarball filename
proc get_version {tarball} {
    set rtv [regexp {(\d+\.)?(\d+\.)?(\*|\d+)} $tarball match]
    if {$rtv == 1} {
        return $match
    } else {
        return 0
    }
}

# jq(1) wrapper
proc parse_group_json {query} {
    set json groups.json
    return [exec jq $query $json]
}

proc get_group {group} {
    switch $group {
        github {
            set github(PortGroup)            [parse_group_json .github.PortGroup]
            set github(github.setup)         [parse_group_json .github.setup]
            set github(github.tarball_from)  [parse_group_json .github.tarball_from]
            return [array get github]
        }
        default {
            error "Unsupported group $group"
        }
    }
}

proc read_template {file} {
    set fp [open $file r]
    set template [read $fp]
    close $fp
    return $template
}

proc feed_template {template metadata} {
    return $template
}

set name ""
set version ""

package require cmdline
set options {
    {url.arg         ""   "set the tarball URL of port"}
    {name.arg        ""   "set the name of port"       }
    {version.arg     ""   "set the version of port"    }
    {group.arg       ""   "set the group of port"      }
    {outfile.arg     ""   "write output to file"       }
    {homebrew.arg    ""   "Search Homebrew"            }
    {fink.arg        ""   "Search Fink"                }
    {debian.arg      ""   "Search Debian"              }
    {opensuse.arg    ""   "Search openSUSE"            }
    {fedora.arg      ""   "Search Fedora"              }
    {ubuntu.arg      ""   "Search Ubuntu"              }
}

set usage ": $argv0
               \[-url <url>] \[-name <name>] \[-version <version>] \[-group <group>]
               \[-outfile <outfile>]
               \[-homebrew|-fink|-debian|-opensuse|-fedora|-ubuntu <query>]
options:"

if {[catch {array set params [cmdline::getoptions ::argv $options $usage]}]} {
    puts [cmdline::usage $options $usage]
    exit 2
}

# Question: duplicate code, how to merge the following five code block?
set query $params(homebrew)
if {[expr {[string length $query] > 0}]} {
    exec open "https://github.com/Homebrew/homebrew/search?l=ruby&q=$query"
    exit 0
}

set query $params(fink)
if {[expr {[string length $query] > 0}]} {
    exec open "http://pdb.finkproject.org/pdb/browse.php?summary=$query"
    exit 0
}

set query $params(debian)
if {[expr {[string length $query] > 0}]} {
    exec open "https://packages.debian.org/search?keywords=${query}&searchon=names&suite=all&section=all"
    exit 0
}

set query $params(opensuse)
if {[expr {[string length $query] > 0}]} {
    exec open "https://software.opensuse.org/search?q=${query}"
    exit 0
}

set query $params(fedora)
if {[expr {[string length $query] > 0}]} {
    exec open "https://admin.fedoraproject.org/pkgdb/packages/%2A${query}%2A/"
    exit 0
}

set query $params(ubuntu)
if {[expr {[string length $query] > 0}]} {
    exec open "http://packages.ubuntu.com/search?keywords=${query}&searchon=names&suite=all&section=all"
    exit 0
}

if {[expr {[string length $params(url)] > 0}]} {
    set tarball [get_tarball_filename $params(url)]
    set name [get_name $tarball]
    set version [get_version $tarball]
}

if {[expr {[string length $params(name)] > 0}]} {
    set name $params(name)
}

if {[expr {[string length $params(version)] > 0}]} {
    set version $params(version)
}

set template [read_template "./Portfile.template"]

if {$name ne""} {
    set template [string map "PortName $name" $template]
}
if {$version ne ""} {
    set template [string map "PortVersion $version" $template]
}

if {[expr {[string length $params(outfile)] > 0}]} {
    set outfile [open $params(outfile) w]
    puts -nonewline $outfile $template
    close $outfile
} else {
    puts -nonewline $template
}

# Test github group option
if {[expr {[string length $params(group)] > 0}]} {
    puts [get_group $params(group)]
}
