package require tcltest 2
namespace import tcltest::*

set pwd [file normalize $argv0]
set pwd [eval file join {*}[lrange [file split $pwd] 0 end-1]]


package require macports 1.0
mportinit
source ./library.tcl
macports_worker_init

#source ../../port1.0/port_autoconf.tcl
#set portutil::autoconf::openssl_path "/usr/bin/openssl"
package require portarchivefetch 1.0
#source ../portarchivefetch.tcl
namespace eval portutil {
    namespace eval autoconf {
	variable openssl_path "/usr/bin/openssl"
    }
}

test filter_sites {
    Filter sites unit test.
} -setup {
    global os.platform os.major os.arch epoch destpath package.destpath configure.build_arch
    global subport version revision package.flat maintainers description categories
    global supported_archs portname porturl portdbpath portpath workpath distname filespath license
    env_init

    set portvariants {var1}
    set porturl http://www.fondu.sourceforge.net/fondu-060102_1var1.darwin_9.noarch.tgz

} -body {
    if {[portarchivefetch::filter_sites] != "http://www.fondu.sourceforge.net/:tgz"} {
	return "FAIL: couldn't fetch file"
    }

    return "Filter sites successful."
} -result "Filter sites successful."


test checkarchivefiles {
    Check archive files unit test.
} -setup {
    global os.platform os.major os.arch epoch destpath package.destpath configure.build_arch
    global subport version revision package.flat maintainers description categories
    global supported_archs portname porturl portdbpath portpath workpath distname filespath license
    env_init

    set urls {www.a.com www.b.com}
    set all_archive_files ""
    set archivefetch.fulldestpath $pwd/path
    set archive_sites {site1:zip site2:tgz}

} -body {
    if {[catch {portarchivefetch::checkarchivefiles $urls}] != 0} {
	return "FAIL: cannot run checkarchivefiles"
    }
    if {[lindex $all_archive_files 0] != "fondu-060102_1var1.darwin_9.noarch.zip"} {
	return "FAIL: invalid archive file name"
    }
    if {[lindex $all_archive_files 1] != "fondu-060102_1var1.darwin_9.noarch.tgz"} {
	return "FAIL: invalid archive file name"
    }
    return "Check archive files successful."
} -result "Check archive files successful."


# test get_full_archive_sites_path
# test checkfiles


test fetchfiles {
    Fetch files unit test. Fails to verify signature.
} -setup {
    global os.platform os.major os.arch epoch destpath package.destpath configure.build_arch
    global subport version revision package.flat maintainers description categories
    global supported_archs portname porturl portdbpath portpath workpath distname filespath license
    env_init

    array set ::portfetch::urlmap {
	fondu http://packages.macports.org/fondu/
	archive_sites www.google.com
    }
    set portarchivefetch::archivefetch_urls {fondu fondu-060102_1.darwin_12.x86_64.tbz2}

} -body {
    set macportsuser macports
    if {[portarchivefetch::fetchfiles] != 0} {
	return "FAIL: cannot fetch port"
    }
    #if {![file exists ${archivefetch.fulldestpath}/fondu_src-060102.tgz.TMP]} {
	#return "FAIL: missing fetched archive"
    #}
    #if {![file exists ${archivefetch.fulldestpath}/fondu_src-060102.tgz.rmd160]} {
	#return "FAIL: missing fetched archive rmd"
    #}
    return "Fetch files successful."

} -cleanup {
    file delete -force $portdbpath

} -result "Fetch files successful."


# test archivefetch_start
# test archivefetch_main


cleanupTests
